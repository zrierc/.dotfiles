#!/usr/bin/env bash

type="$HOME/.config/rofi/conf"
style='applets-vertical.rasi'
theme="$type/$style"

# Theme Elements
prompt='Screenshot'
mesg="DIR: $(xdg-user-dir PICTURES)/Screenshots"

# rofi window layout configuration
list_col='1'
list_row='5'
win_width='120px'
location='west'
anchor='west'
xoffset='20px'

# Options
layout=$(cat ${theme} | grep 'USE_ICON' | cut -d'=' -f2)
if [[ "$layout" == 'NO' ]]; then
  ## feather font/icon
  # option_1=" Capture Area"
  # option_2=" Capture Desktop"
  # option_3=" Capture Window"
  # option_4=" Capture in 5s"
  # option_5=" Capture in 10s"

  ## nerd font/icon
  option_1="󰆞  Capture Area"
  option_2="󱣴  Capture Desktop"
  option_3="󰲍  Capture Window"
  option_4="󰔝  Capture in 3s"
  option_5="󰔜  Capture in 10s"
else
  ## feather font/icon
  # option_1=""
  # option_2=""
  # option_3=""
  # option_4=""
  # option_5=""

  ## nerd font/icon
  option_1="󰆞"
  option_2="󱣴"
  option_3="󰲍"
  option_4="󰔝"
  option_5="󰔜"
fi

# Rofi CMD
rofi_cmd() {
  rofi -theme-str "window {width: $win_width; location: $location; anchor: $anchor; x-offset: $xoffset;}" \
    -theme-str "listview {columns: $list_col; lines: $list_row;}" \
    -theme-str 'textbox-prompt-colon {str: "";}' \
    -theme-str 'element-text {horizontal-align: 0.4;}' \
    -dmenu \
    -p "$prompt" \
    -mesg "$mesg" \
    -markup-rows \
    -theme ${theme}
}

# Pass variables to rofi dmenu
run_rofi() {
  echo -e "$option_1\n$option_2\n$option_3\n$option_4\n$option_5" | rofi_cmd
}

# Screenshot
time=$(date +%Y-%m-%d_%I-%M-%S)
geometry=$(xrandr | grep 'current' | head -n1 | cut -d',' -f2 | tr -d '[:blank:],current')
dir="$(xdg-user-dir PICTURES)/Screenshots"
file="screenshot_${time}_${geometry}.png"

if [[ ! -d "$dir" ]]; then
  mkdir -p "$dir"
fi

# notify and view screenshot
notify_view() {
  notify_cmd_shot='dunstify -u low -t 300 --replace=420'
  ${notify_cmd_shot} "Copied to clipboard."
  # viewnior ${dir}/"$file"
  if [[ -e "$dir/$file" ]]; then
    ${notify_cmd_shot} "Screenshot Saved."
  else
    ${notify_cmd_shot} "Screenshot Deleted."
  fi
}

# Copy screenshot to clipboard
copy_shot() {
  tee "$file" | xclip -selection clipboard -t image/png
}

# countdown
countdown() {
  for sec in $(seq $1 -1 1); do
    dunstify -t 1000 --replace=420 "Taking shot in : $sec"
    sleep 1
  done
}

# take shots
shotnow() {
  cd ${dir} && sleep 0.5 && maim -u -f png | copy_shot
  notify_view
}

shot3() {
  countdown '3'
  sleep 1 && cd ${dir} && maim -u -f png | copy_shot
  notify_view
}

shot10() {
  countdown '10'
  sleep 1 && cd ${dir} && maim -u -f png | copy_shot
  notify_view
}

shotwin() {
  cd ${dir} && maim -u -f png -i $(xdotool getactivewindow) | copy_shot
  notify_view
}

shotarea() {
  cd ${dir} && maim -u -f png -s -b 2 -c 0.35,0.55,0.85,0.25 -l | copy_shot
  notify_view
}

# Execute Command
run_cmd() {
  if [[ "$1" == '--now' ]]; then
    shotnow
  elif [[ "$1" == '--area' ]]; then
    shotarea
  elif [[ "$1" == '--win' ]]; then
    shotwin
  elif [[ "$1" == '--time3' ]]; then
    shot3
  elif [[ "$1" == '--time10' ]]; then
    shot10
  fi
}

# Actions
chosen="$(run_rofi)"
case ${chosen} in
$option_1)
  run_cmd --area
  ;;
$option_2)
  run_cmd --now
  ;;
$option_3)
  run_cmd --win
  ;;
$option_4)
  run_cmd --time3
  ;;
$option_5)
  run_cmd --time10
  ;;
esac
